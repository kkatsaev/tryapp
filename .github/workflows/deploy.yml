name: Deploy Workflow

on:
  workflow_dispatch:
  # auto-deploy on script change (simplify deploy development)
  push:
    #branches: [ 'master' ]
    paths:
      - '.github/workflows/deploy.yml'

jobs:
#  echo_job:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Echo Message
#        run: echo "Hello, this is a manually triggered workflow!"
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 #name: Checkout codebase

      # custom docker stack deploy steps (much faster than docker-stack-deploy action)
      - name: Setup SSH Private Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.REMOTE_PRIVATE_KEY }}
      - name: Deploy Docker Stack
#          echo "==== key is added"
#          ssh-add -L
#          echo "==== check host available"
#          nc -vz ${{ secrets.REMOTE_HOST }} 22
#          echo "==== verify SSH (w/o host check)"
#          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} whoami
        run: |
          echo "==== setup known_hosts"
          ssh-keyscan -t rsa,ecdsa,ed25519 -H ${{ secrets.REMOTE_HOST }} 2> /dev/null >> ~/.ssh/known_hosts
          SSH_TARGET="${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}"

          echo "==== setup ssh_config (speedup connections and workaround firewall limits issue)"
          echo "Host ${{ secrets.REMOTE_HOST }}" >> ~/.ssh/config
          echo "  ControlMaster auto" >> ~/.ssh/config
          echo "  ControlPath ~/.ssh/control-%C" >> ~/.ssh/config
          echo "  ControlPersist 5s" >> ~/.ssh/config

          echo "==== diagnose ssh_config"
          cat ~/.ssh/config || true
          
          echo "==== TMP deploy data for volumes locally (till separate image isn't built)"
          export DATA_ROOT="/home/${{ secrets.REMOTE_USER }}"
          scp -r deploy/ $SSH_TARGET:.
          scp -r pages/ $SSH_TARGET:.
          
          #echo "==== diagnose rendered deployed stack"
          #docker stack config --compose-file compose.yaml

          echo "==== prepare templates rending and initial deploy"
          echo "diagnose shell: $0 ($SHELL)"
          export SERVER_NAME=${{ secrets.REMOTE_HOST }}
          mkdir -p $DATA_ROOT/certbot/{www,conf}

          echo "==== docker stack deploy"
          export DOCKER_HOST="ssh://${SSH_TARGET}"
          docker stack deploy --compose-file compose.yaml tt
      - name: Post Deploy Cleanup
        if: always()
        run: |
          echo "==== force close ssh master connection"
          SSH_TARGET="${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}"
          ssh -O exit $SSH_TARGET || true
          echo "==== rm generated configs"
          rm -f ~/.ssh/known_hosts ~/.ssh/config

#      - name: Deploy stack
#        uses: shockhs/docker-stack-deploy@v1.2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}          
#          remote_host: ${{ secrets.REMOTE_HOST }}
#          remote_user: ${{ secrets.REMOTE_USER }}
#          remote_private_key: ${{ secrets.REMOTE_PRIVATE_KEY }}
#          stack_file: "docker-compose.yml"
#          stack_name: "tt"
#          debug: 1
