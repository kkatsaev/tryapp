name: Stack Deploy

on:
  workflow_dispatch:
  push: # auto-deploy on change (simplify deploy development)
    #branches: [ 'master' ]
    paths:
      - '.github/workflows/stack.yml'
      - '.github/composites/ssh-remote-host/**'
      - 'compose.yaml'
      - 'compose.release.yaml'
      - 'deploy/nginx/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 #name: Checkout codebase

      # custom docker stack deploy steps (much faster than docker-stack-deploy action)
      - uses: ./.github/composites/ssh-remote-host
        with:
          ssh_user: ${{ secrets.REMOTE_USER }}
          ssh_host: ${{ secrets.REMOTE_HOST }}
          ssh_private_key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          step_name: Docker Stack Deploy
          step_run: |
            echo "==== prepare templates rending and initial deploy"
            export DATA_ROOT="/home/${{ secrets.REMOTE_USER }}"
            export SERVER_NAME=${{ secrets.REMOTE_HOST }}
            export DOMAIN_EMAIL=${{ secrets.DOMAIN_EMAIL }}
            # initial tmp certbot setup #TODO: rm in favor of swarm secrets
            ssh -T $SSH_TARGET mkdir -p $DATA_ROOT/certbot/{www,conf}
            
            echo "==== deploy configs" #tmp until app image isn't built
            scp -r deploy/ $SSH_TARGET:.
            
            echo "==== docker stack deploy"
            export DOCKER_HOST="ssh://${SSH_TARGET}"
            #docker stack config -c compose.yaml -c compose.release.yaml #diagnose rendered stack
            docker stack deploy -c compose.yaml -c compose.release.yaml tt
            #TODO: docker service update --force tt_web
