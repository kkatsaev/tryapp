name: SSH Remote Host Commands
description: Helper to run on remote host via ssh
inputs:
  ssh_user:
    required: true
    description: ssh user
  ssh_host:
    required: true
    description: ssh host
  ssh_private_key:
    required: true
    description: ssh private key
  step_run:
    required: true
    description: commands script 
  step_name:
    required: false
    description: step name
    default: Run Commands

runs:
  using: "composite"
  steps:
    - name: Setup SSH Private Key
      uses: webfactory/ssh-agent@v0.9.0 # https://github.com/webfactory/ssh-agent
      with:
        ssh-private-key: ${{ inputs.ssh_private_key }}
        log-public-key: false # To simplify debugging and since it contains public key information only, this is turned on by defaultTo simplify debugging and since it contains public key information only, this is turned on by default

    - name: Setup SSH Client
      shell: bash
      run: |
        # allow implicit ssh commands that cannot disable host key checking (for example docker with ssh:// host)
        echo "==== setup known_hosts"
        ssh-keyscan -t rsa,ecdsa,ed25519 -H ${{ inputs.ssh_host }} 2> /dev/null >> ~/.ssh/known_hosts
        SSH_TARGET="${{ inputs.ssh_user }}@${{ inputs.ssh_host }}"

        # speedup connections and workaround firewall limits issue
        echo "==== setup ssh_config" 
        echo "Host ${{ inputs.ssh_host }}" >> ~/.ssh/config
        echo "  ControlMaster auto" >> ~/.ssh/config
        echo "  ControlPath ~/.ssh/control-%C" >> ~/.ssh/config
        echo "  ControlPersist 5s" >> ~/.ssh/config

#        echo "==== check result ssh_config"
#        cat ~/.ssh/config || true
#        echo "==== check key is added"
#        ssh-add -L
#        echo "==== check host available"
#        nc -vz ${{ inputs.ssh_host }} 22
#        echo "==== check ssh available (w/o host check)"
#        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} whoami

    - name: ${{ inputs.step_name }} Run Commands
      shell: bash
      run: ${{ inputs.step_run }}
      env:
        SSH_TARGET: "${{ inputs.ssh_user }}@${{ inputs.ssh_host }}"

    - name: Cleanup SSH Client
      if: always()
      shell: bash
      run: |
        echo "==== force close ssh master connection"
        SSH_TARGET="${{ inputs.ssh_user }}@${{ inputs.ssh_host }}"
        ssh -O exit $SSH_TARGET || true
        echo "==== rm generated configs"
        rm -f ~/.ssh/known_hosts ~/.ssh/config
